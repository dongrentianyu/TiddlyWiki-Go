name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        platform:
          - os: windows-latest
            name: win64
            ext: .exe
          - os: macos-latest
            name: darwin-amd64
            ext: ""
          - os: macos-latest
            name: darwin-arm64
            ext: ""
          - os: ubuntu-latest
            name: linux-amd64
            ext: ""

    runs-on: ${{ matrix.platform.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install dependencies (Ubuntu)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev

      - name: Get version from tag
        id: get_version
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=dev" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Build frontend
        run: |
          cd frontend
          npm install
          npm run build

      - name: Build application (Windows)
        if: matrix.platform.os == 'windows-latest'
        run: wails build -platform windows/amd64

      - name: Build application (macOS AMD64)
        if: matrix.platform.os == 'macos-latest' && matrix.platform.name == 'darwin-amd64'
        run: wails build -platform darwin/amd64

      - name: Build application (macOS ARM64)
        if: matrix.platform.os == 'macos-latest' && matrix.platform.name == 'darwin-arm64'
        run: wails build -platform darwin/arm64

      - name: Build application (Linux)
        if: matrix.platform.os == 'ubuntu-latest'
        run: wails build -platform linux/amd64

      - name: Rename build artifact
        run: |
          cd build/bin
          if [ "${{ matrix.platform.os }}" = "windows-latest" ]; then
            mv TiddlyWiki-Manager.exe TiddlyWiki-Manager-${{ matrix.platform.name }}-v${{ steps.get_version.outputs.VERSION }}.exe
          elif [ "${{ matrix.platform.os }}" = "macos-latest" ]; then
            if [ "${{ matrix.platform.name }}" = "darwin-arm64" ]; then
              mv TiddlyWiki-Manager.app TiddlyWiki-Manager-darwin-arm64-v${{ steps.get_version.outputs.VERSION }}.app
              tar -czf TiddlyWiki-Manager-darwin-arm64-v${{ steps.get_version.outputs.VERSION }}.tar.gz TiddlyWiki-Manager-darwin-arm64-v${{ steps.get_version.outputs.VERSION }}.app
            else
              mv TiddlyWiki-Manager.app TiddlyWiki-Manager-darwin-amd64-v${{ steps.get_version.outputs.VERSION }}.app
              tar -czf TiddlyWiki-Manager-darwin-amd64-v${{ steps.get_version.outputs.VERSION }}.tar.gz TiddlyWiki-Manager-darwin-amd64-v${{ steps.get_version.outputs.VERSION }}.app
            fi
          else
            mv TiddlyWiki-Manager TiddlyWiki-Manager-${{ matrix.platform.name }}-v${{ steps.get_version.outputs.VERSION }}
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: TiddlyWiki-Manager-${{ matrix.platform.name }}-v${{ steps.get_version.outputs.VERSION }}
          path: |
            build/bin/TiddlyWiki-Manager-*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: artifacts/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
